async function main() {
    const input = `sender=0x0000000000000000000000000000000000000B6F addr=[test/invariant/handlers/InvariantHandler.sol:InvariantHandler]0x7712Db7D4a3B3E657f719164B759b0e0308b9Ad5 calldata=disburse(uint256,uint256,uint256) args=[511, 18732 [1.873e4], 1115958799 [1.115e9]]
    sender=0xABF6b1d00DAb76340d9b563f2E1de527Ba1242cc addr=[test/invariant/handlers/InvariantHandler.sol:InvariantHandler]0x7712Db7D4a3B3E657f719164B759b0e0308b9Ad5 calldata=drawdown(uint256,uint256,uint256) args=[115792089237316195423570985008687907853269984665640564039457584007913129639933 [1.157e77], 0, 115792089237316195423570985008687907853269984665640564039457584007913129639934 [1.157e77]]
    sender=0x46457E350B16ecC7Bc24d1E6299dC554Ed7CAE93 addr=[test/invariant/handlers/InvariantHandler.sol:InvariantHandler]0x7712Db7D4a3B3E657f719164B759b0e0308b9Ad5 calldata=drawdown(uint256,uint256,uint256) args=[4773, 9503, 15334 [1.533e4]]
    sender=0xe9e2973EE3e94394fB9D0b5DbDDE01C8C1080ed4 addr=[test/invariant/handlers/InvariantHandler.sol:InvariantHandler]0x7712Db7D4a3B3E657f719164B759b0e0308b9Ad5 calldata=makePayment(uint256,uint256,uint256) args=[115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77], 115792089237316195423570985008687907853269984665640564039457584007913129639934 [1.157e77], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]]
    sender=0x0000000000000000000000000000000000004a87 addr=[test/invariant/handlers/InvariantHandler.sol:InvariantHandler]0x7712Db7D4a3B3E657f719164B759b0e0308b9Ad5 calldata=cancelRedemptionRequest(uint256,uint256,uint256,uint256) args=[307351878326496349646861946412211957386772448903113552090633114 [3.073e62], 2, 115792089237316195423570985008687907853269984665640564039457584007913129639933 [1.157e77], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]]
    sender=0x00000000000000000000000000000000a21Ec6A6 addr=[test/invariant/handlers/InvariantHandler.sol:InvariantHandler]0x7712Db7D4a3B3E657f719164B759b0e0308b9Ad5 calldata=drawdown(uint256,uint256,uint256) args=[12965627532955235 [1.296e16], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77], 34271968774548698554216071258149267 [3.427e34]]
    sender=0x05a8DFd61a3F4D7F2a54627172cDc5CF7eE5f887 addr=[test/invariant/handlers/InvariantHandler.sol:InvariantHandler]0x7712Db7D4a3B3E657f719164B759b0e0308b9Ad5 calldata=addRedemptionRequest(uint256,uint256,uint256,uint256) args=[10467 [1.046e4], 14373 [1.437e4], 12718 [1.271e4], 19180 [1.918e4]]
    sender=0x850ea31A3f0DE26F9D563b865Ed64b1072e029B8 addr=[test/invariant/handlers/InvariantHandler.sol:InvariantHandler]0x7712Db7D4a3B3E657f719164B759b0e0308b9Ad5 calldata=drawdown(uint256,uint256,uint256) args=[4696101871635116613687179390375553842905116356921 [4.696e48], 115792089237316195423570985008687907853269984665640564039457584007913129639934 [1.157e77], 0]
    sender=0x000000000000000000000000000000000000357F addr=[test/invariant/handlers/InvariantHandler.sol:InvariantHandler]0x7712Db7D4a3B3E657f719164B759b0e0308b9Ad5 calldata=cancelRedemptionRequest(uint256,uint256,uint256,uint256) args=[3, 142865224980 [1.428e11], 3203463038928617776283565669072150091243907203013574266905857603663 [3.203e66], 9629713799523486109640678726817266933822504961979653993916971138404029 [9.629e69]]
    sender=0x0000000000000000000000000000000000004c30 addr=[test/invariant/handlers/InvariantHandler.sol:InvariantHandler]0x7712Db7D4a3B3E657f719164B759b0e0308b9Ad5 calldata=deposit(uint256,uint256,uint256,uint256) args=[115792089237316195423570985008687907853269984665640564039457584007913129639934 [1.157e77], 196169082861832774685458594841127741270096699 [1.961e44], 1, 115792089237316195423570985008687907853269984665640564039457584007913129639932 [1.157e77]]`;
    const regex = /calldata=([a-zA-Z]+)\([^\)]+\)\sargs=\[(.+)\]/g;
    let match;
    let result = "";

    while ((match = regex.exec(input)) !== null) {
        const functionName = match[1];
        const argsMatch = match[2];
        // console.log(`argsMatch: ${argsMatch}`);
        const args = argsMatch.split(`,`).map((arg) => {
            // console.log(`arg: ${arg.trim()}, arg0: ${arg.trim().split(` `)[0].trim()}`);
            return arg.trim().split(` `)[0].trim();
        });
        result += `handler.${functionName}(\n${args.join(",\n")}\n);\n`;
    }

    console.log(result);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });
